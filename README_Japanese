
 ////////////////////////////////////////////////
 ///                                          ///
            HAL QCD analysis code set 

            Author : Takaya Miyamoto
 ///                                          ///
 ////////////////////////////////////////////////


 ############   Build   ############
 analysis_code_set の Makefile があるディレクトリ上で
 make と打てば obj/ 内にオブジェクトファイルが自動的に生成され
  ( ただし、gnu make のインストールが必要 )、
 bin/ 内に各実行ファイルが生成されます。
 全てビルドする必要がない場合は、make にターゲットを
 つけて実行してください。よく用いるものは、例えば

 * pot : potential の計算
 * mas : effective mass, mass fitting などの計算
 * fit : potential fitting などの計算
 * obs : phase shift, scattering length などの計算

 などがあります。その他にもいろいろと機能がありますので、
 Makefile を参照するか宮本までご連絡ください。


 #########   How to use   #########
 各実行ファイルの基本的な使い方は次の通りです。
 1) ./arg の中の arguments ファイルを必要に応じて
 編集する
 2) 各実行ファイルに -f オプションを用いてその
 arguments ファイルを指定し実行する
 例 : ./pot -f ./arg/arguments_potential.txt

 また、各実行ファイルはオプション無しで実行すると
 その usage が表示されます。基本的には -f オプション
 だけで実行可能ですが、他のオプションを指定すればその
 オプションで指定した引数が優先されて実行されます。
 これは、バッチ処理を行う際に特に効果的であり、複数の
 arguments ファイルを用意する手間を省くことができます。


 #########   Name definition   #########
 arguments ファイルに記入する
 hadron名、channel名、fit function名
 の定義は、それぞれ

 definition/hadron_name.txt
 definition/channel_name.txt
 definition/fit_function_name.txt

 にあります。参照してください。


 #######   Gauge configs list   #######
 pot, mas などの実行の際には gauge configs の list
 を読み込ませる必要があります。sample が 
 ./arg/conf_list にありますので、
 必要に応じて同様な形式のものを作ってください。
 この際、gauge configs list の行数が #.confs 
 として読み込まれますので、余分な改行を入れないように
 してください。
 
 ############   OpenMP   ############
 Default では全て逐次処理となっています。
 OpenMP を使う場合は、Makefile 内の CXXFLAGS に
 -fopenmp を加えてからビルドしてください。

 OpenMP は、特に計算に時間がかかる以下の部分にのみ
 用いています。

 * include/common/make_jack_knife_sample.h の
	make_JK_sample()
 * include/gauge/gauge_link.h
 * include/gauge/matrix_func.h
 * main/main_eigen_energy_schrodinger.cpp
 * main/main_folding_potential.cpp
 * main/main_phase_shift.cpp
 * main/main_potential.2x2.cpp
 * main/main_potential.3x3.cpp
 

 ############   doxygen   ############
 analysis_code_set の Doxyfile があるディレクトリ上で
 doxygen と打てば html/ の中にファイルが自動的に生成されます
 ( ただし、doxygen のインストールが必要 )。


 ##########  Libraty の作成  ##########
 Makefile のあるディレクトリで make lib とすれば、
 同じディレクトリに analysisHAL.a というライブラリが
 作成されます。これをリンクすれば、analysis_code_set
 のすべての関数が使用できます。


 ############ Debug の表示 ############
 Makefile の CXXFLAGS に -DDEBUG_MODE という
 オプションを加えてからビルドすればデバッグモードでの出力に
 なり、どのクラス・関数に入ったかの情報が出力
 されるようになりす。
 これにより、バグが発生した際にその地点をすぐに発見する
 ことができます。


 ######### Fit function の追加 #########
 1) src/fitting/function_type.cpp
 2) include/fitting/fit_function_NR.h
 3) include/observable/observable_base.h
 4) src/observable/potential_funcs.cpp
 5) src/fitting/fit_data_NR.cpp

 にそれぞれ追加する。
 パラメータ数が10を超える場合は、
 src/fitting/print_func_gnu.cpp も編集

